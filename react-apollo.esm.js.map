{"version":3,"file":"react-apollo.esm.js","sources":["../src/ApolloConsumer.tsx","../node_modules/tslib/tslib.es6.js","../src/ApolloProvider.tsx","../src/parser.ts","../src/component-utils.tsx","../src/utils/shallowEqual.ts","../src/Query.tsx","../src/Mutation.tsx","../src/Subscriptions.tsx","../src/hoc-utils.tsx","../src/query-hoc.tsx","../src/mutation-hoc.tsx","../src/subscription-hoc.tsx","../src/graphql.tsx","../src/withApollo.tsx","../src/getDataFromTree.ts","../src/renderToStringWithData.ts","../src/utils/flowRight.ts"],"sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient from 'apollo-client';\r\n\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport interface ApolloConsumerProps {\r\n  children: (client: ApolloClient<any>) => React.ReactElement<any> | null;\r\n}\r\n\r\nconst ApolloConsumer: React.StatelessComponent<ApolloConsumerProps> = (props, context) => {\r\n  invariant(\r\n    !!context.client,\r\n    `Could not find \"client\" in the context of ApolloConsumer. Wrap the root component in an <ApolloProvider>`,\r\n  );\r\n\r\n  return props.children(context.client);\r\n};\r\n\r\nApolloConsumer.contextTypes = {\r\n  client: PropTypes.object.isRequired,\r\n};\r\n\r\nApolloConsumer.propTypes = {\r\n  children: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ApolloConsumer;\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\nimport ApolloClient from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\n\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport interface ApolloProviderProps<TCache> {\r\n  client: ApolloClient<TCache>;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default class ApolloProvider<TCache> extends Component<ApolloProviderProps<TCache>> {\r\n  static propTypes = {\r\n    client: PropTypes.object.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n  };\r\n\r\n  static childContextTypes = {\r\n    client: PropTypes.object.isRequired,\r\n    operations: PropTypes.object,\r\n  };\r\n\r\n  private operations: Map<string, { query: DocumentNode; variables: any }> = new Map();\r\n\r\n  constructor(props: ApolloProviderProps<TCache>, context: any) {\r\n    super(props, context);\r\n\r\n    invariant(\r\n      props.client,\r\n      'ApolloProvider was not passed a client instance. Make ' +\r\n        'sure you pass in your client via the \"client\" prop.',\r\n    );\r\n\r\n    // we have to attach to the client since you could have multiple\r\n    // providers\r\n    // XXX this is backwards compat and will be removed in 3.0\r\n    if (!(props.client as any).__operations_cache__) {\r\n      (props.client as any).__operations_cache__ = this.operations;\r\n    }\r\n  }\r\n\r\n  getChildContext() {\r\n    return {\r\n      client: this.props.client,\r\n      operations: (this.props.client as any).__operations_cache__,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n","import {\r\n  DocumentNode,\r\n  DefinitionNode,\r\n  VariableDefinitionNode,\r\n  OperationDefinitionNode,\r\n} from 'graphql';\r\n\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport enum DocumentType {\r\n  Query,\r\n  Mutation,\r\n  Subscription,\r\n}\r\n\r\nexport interface IDocumentDefinition {\r\n  type: DocumentType;\r\n  name: string;\r\n  variables: ReadonlyArray<VariableDefinitionNode>;\r\n}\r\n\r\nconst cache = new Map();\r\n\r\n// the parser is mainly a safety check for the HOC\r\nexport function parser(document: DocumentNode): IDocumentDefinition {\r\n  const cached = cache.get(document);\r\n  if (cached) return cached;\r\n  // variables\r\n  let variables, type, name;\r\n\r\n  /*\r\n\r\n    Saftey checks for proper usage of react-apollo\r\n\r\n  */\r\n  invariant(\r\n    !!document && !!document.kind,\r\n    // tslint:disable-line\r\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\r\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\r\n      `to convert your operation into a document`,\r\n  );\r\n\r\n  const fragments = document.definitions.filter(\r\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition',\r\n  );\r\n\r\n  const queries = document.definitions.filter(\r\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'query',\r\n  );\r\n\r\n  const mutations = document.definitions.filter(\r\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'mutation',\r\n  );\r\n\r\n  const subscriptions = document.definitions.filter(\r\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'subscription',\r\n  );\r\n\r\n  invariant(\r\n    !fragments.length || (queries.length || mutations.length || subscriptions.length),\r\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\r\n      `You must include a query, subscription or mutation as well`,\r\n  );\r\n\r\n  invariant(\r\n    queries.length + mutations.length + subscriptions.length <= 1,\r\n    // tslint:disable-line\r\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\r\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\r\n      `subscriptions and ${mutations.length} mutations. ` +\r\n      `You can use 'compose' to join multiple operation types to a component`,\r\n  );\r\n\r\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\r\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\r\n\r\n  const definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\r\n\r\n  invariant(\r\n    definitions.length === 1,\r\n    // tslint:disable-line\r\n    `react-apollo only supports one defintion per HOC. ${document} had ` +\r\n      `${definitions.length} definitions. ` +\r\n      `You can use 'compose' to join multiple operation types to a component`,\r\n  );\r\n\r\n  const definition = definitions[0] as OperationDefinitionNode;\r\n  variables = definition.variableDefinitions || [];\r\n\r\n  if (definition.name && definition.name.kind === 'Name') {\r\n    name = definition.name.value;\r\n  } else {\r\n    name = 'data'; // fallback to using data if no name\r\n  }\r\n\r\n  const payload = { name, type, variables };\r\n  cache.set(document, payload);\r\n  return payload;\r\n}\r\n","import ApolloClient from 'apollo-client';\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport interface CommonComponentProps {\r\n  client?: ApolloClient<Object>;\r\n}\r\n\r\nexport interface CommonComponentContext {\r\n  client?: ApolloClient<Object>;\r\n}\r\n\r\nexport function getClient(\r\n  props: CommonComponentProps,\r\n  context: CommonComponentContext,\r\n): ApolloClient<Object> {\r\n  const client = props.client || context.client;\r\n\r\n  invariant(\r\n    !!client,\r\n    'Could not find \"client\" in the context or passed in as a prop. ' +\r\n      'Wrap the root component in an <ApolloProvider>, or pass an ' +\r\n      'ApolloClient instance in via props.',\r\n  );\r\n\r\n  return client as ApolloClient<Object>;\r\n}\r\n","const { hasOwnProperty } = Object.prototype;\r\n\r\nfunction is(x: any, y: any) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\r\n  }\r\n  return x !== x && y !== y;\r\n}\r\n\r\nfunction isObject(obj: any): obj is { [key: string]: any } {\r\n  return obj !== null && typeof obj === \"object\";\r\n}\r\n\r\nexport default function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) {\r\n    return true;\r\n  }\r\n\r\n  if (!isObject(objA) || !isObject(objB)) {\r\n    return false;\r\n  }\r\n\r\n  const keys = Object.keys(objA);\r\n\r\n  if (keys.length !== Object.keys(objB).length) {\r\n    return false;\r\n  }\r\n\r\n  return keys.every(\r\n    key => hasOwnProperty.call(objB, key) && is(objA[key], objB[key]),\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, {\r\n  ObservableQuery,\r\n  ApolloError,\r\n  ApolloQueryResult,\r\n  NetworkStatus,\r\n  FetchMoreOptions,\r\n  FetchMoreQueryOptions,\r\n} from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\nimport { ZenObservable } from 'zen-observable-ts';\r\nimport { OperationVariables, GraphqlQueryControls, QueryOpts } from './types';\r\nimport { parser, DocumentType, IDocumentDefinition } from './parser';\r\nimport { getClient } from './component-utils';\r\nimport { RenderPromises } from './getDataFromTree';\r\n\r\nimport shallowEqual from './utils/shallowEqual';\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport type ObservableQueryFields<TData, TVariables> = Pick<\r\n  ObservableQuery<TData, TVariables>,\r\n  'startPolling' | 'stopPolling' | 'subscribeToMore' | 'updateQuery' | 'refetch' | 'variables'\r\n> & {\r\n  fetchMore: (<K extends keyof TVariables>(\r\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> & FetchMoreOptions<TData, TVariables>,\r\n  ) => Promise<ApolloQueryResult<TData>>) &\r\n    (<TData2, TVariables2, K extends keyof TVariables2>(\r\n      fetchMoreOptions: { query: DocumentNode } & FetchMoreQueryOptions<TVariables2, K> &\r\n        FetchMoreOptions<TData2, TVariables2>,\r\n    ) => Promise<ApolloQueryResult<TData2>>);\r\n};\r\n\r\nfunction compact(obj: any) {\r\n  return Object.keys(obj).reduce(\r\n    (acc, key) => {\r\n      if (obj[key] !== undefined) {\r\n        acc[key] = obj[key];\r\n      }\r\n\r\n      return acc;\r\n    },\r\n    {} as any,\r\n  );\r\n}\r\n\r\nfunction observableQueryFields<TData, TVariables>(\r\n  observable: ObservableQuery<TData>,\r\n): ObservableQueryFields<TData, TVariables> {\r\n  const fields = {\r\n    variables: observable.variables,\r\n    refetch: observable.refetch.bind(observable),\r\n    fetchMore: observable.fetchMore.bind(observable),\r\n    updateQuery: observable.updateQuery.bind(observable),\r\n    startPolling: observable.startPolling.bind(observable),\r\n    stopPolling: observable.stopPolling.bind(observable),\r\n    subscribeToMore: observable.subscribeToMore.bind(observable),\r\n  };\r\n  // TODO: Need to cast this because we improved the type of `updateQuery` to be parametric\r\n  // on variables, while the type in Apollo client just has object.\r\n  // Consider removing this when that is properly typed\r\n  return fields as ObservableQueryFields<TData, TVariables>;\r\n}\r\n\r\nexport interface QueryResult<TData = any, TVariables = OperationVariables>\r\n  extends ObservableQueryFields<TData, TVariables> {\r\n  client: ApolloClient<any>;\r\n  // we create an empty object to make checking for data\r\n  // easier for consumers (i.e. instead of data && data.user\r\n  // you can just check data.user) this also makes destructring\r\n  // easier (i.e. { data: { user } })\r\n  // however, this isn't realy possible with TypeScript that\r\n  // I'm aware of. So intead we enforce checking for data\r\n  // like so result.data!.user. This tells TS to use TData\r\n  // XXX is there a better way to do this?\r\n  data: TData | undefined;\r\n  error?: ApolloError;\r\n  loading: boolean;\r\n  networkStatus: NetworkStatus;\r\n}\r\n\r\nexport interface QueryProps<TData = any, TVariables = OperationVariables> extends QueryOpts<TVariables> {\r\n  children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\r\n  query: DocumentNode;\r\n  displayName?: string;\r\n  skip?: boolean;\r\n  onCompleted?: (data: TData | {}) => void;\r\n  onError?: (error: ApolloError) => void;\r\n}\r\n\r\nexport interface QueryContext {\r\n  client?: ApolloClient<Object>;\r\n  operations?: Map<string, { query: DocumentNode; variables: any }>;\r\n  renderPromises?: RenderPromises;\r\n}\r\n\r\nexport default class Query<TData = any, TVariables = OperationVariables> extends React.Component<\r\n  QueryProps<TData, TVariables>\r\n> {\r\n  static contextTypes = {\r\n    client: PropTypes.object,\r\n    operations: PropTypes.object,\r\n    renderPromises: PropTypes.object,\r\n  };\r\n\r\n  static propTypes = {\r\n    client: PropTypes.object,\r\n    children: PropTypes.func.isRequired,\r\n    fetchPolicy: PropTypes.string,\r\n    notifyOnNetworkStatusChange: PropTypes.bool,\r\n    onCompleted: PropTypes.func,\r\n    onError: PropTypes.func,\r\n    pollInterval: PropTypes.number,\r\n    query: PropTypes.object.isRequired,\r\n    variables: PropTypes.object,\r\n    ssr: PropTypes.bool,\r\n    partialRefetch: PropTypes.bool,\r\n  };\r\n\r\n  context: QueryContext | undefined;\r\n\r\n  private client: ApolloClient<Object>;\r\n\r\n  // request / action storage. Note that we delete querySubscription if we\r\n  // unsubscribe but never delete queryObservable once it is created. We\r\n  // only delete queryObservable when we unmount the component.\r\n  private queryObservable?: ObservableQuery<TData> | null;\r\n  private querySubscription?: ZenObservable.Subscription;\r\n  private previousData: any = {};\r\n  private refetcherQueue?: {\r\n    args: any;\r\n    resolve: (value?: any | PromiseLike<any>) => void;\r\n    reject: (reason?: any) => void;\r\n  };\r\n\r\n  private hasMounted: boolean = false;\r\n  private operation?: IDocumentDefinition;\r\n  private lastResult: ApolloQueryResult<TData> | null = null;\r\n\r\n  constructor(props: QueryProps<TData, TVariables>, context: QueryContext) {\r\n    super(props, context);\r\n\r\n    this.client = getClient(props, context);\r\n    this.initializeQueryObservable(props);\r\n  }\r\n\r\n  // For server-side rendering (see getDataFromTree.ts)\r\n  fetchData(): Promise<ApolloQueryResult<any>> | boolean {\r\n    if (this.props.skip) return false;\r\n\r\n    // pull off react options\r\n    const {\r\n      children,\r\n      ssr,\r\n      displayName,\r\n      skip,\r\n      client,\r\n      onCompleted,\r\n      onError,\r\n      partialRefetch,\r\n      ...opts\r\n    } = this.props;\r\n\r\n    let { fetchPolicy } = opts;\r\n    if (ssr === false) return false;\r\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\r\n      fetchPolicy = 'cache-first'; // ignore force fetch in SSR;\r\n    }\r\n\r\n    const observable = this.client.watchQuery({\r\n      ...opts,\r\n      fetchPolicy,\r\n    });\r\n\r\n    // Register the SSR observable, so it can be re-used once the value comes back.\r\n    if (this.context && this.context.renderPromises) {\r\n      this.context.renderPromises.registerSSRObservable(this, observable);\r\n    }\r\n\r\n    const result = this.queryObservable!.currentResult();\r\n\r\n    return result.loading ? observable.result() : false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.hasMounted = true;\r\n    if (this.props.skip) return;\r\n\r\n    this.startQuerySubscription(true);\r\n    if (this.refetcherQueue) {\r\n      const { args, resolve, reject } = this.refetcherQueue;\r\n      this.queryObservable!.refetch(args)\r\n        .then(resolve)\r\n        .catch(reject);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: QueryProps<TData, TVariables>, nextContext: QueryContext) {\r\n    // the next render wants to skip\r\n    if (nextProps.skip && !this.props.skip) {\r\n      this.removeQuerySubscription();\r\n      return;\r\n    }\r\n\r\n    const nextClient = getClient(nextProps, nextContext);\r\n\r\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\r\n      return;\r\n    }\r\n\r\n    if (this.client !== nextClient) {\r\n      this.client = nextClient;\r\n      this.removeQuerySubscription();\r\n      this.queryObservable = null;\r\n      this.previousData = {};\r\n      this.updateQuery(nextProps);\r\n    }\r\n\r\n    if (this.props.query !== nextProps.query) {\r\n      this.removeQuerySubscription();\r\n    }\r\n\r\n    this.updateQuery(nextProps);\r\n    if (nextProps.skip) return;\r\n    this.startQuerySubscription();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeQuerySubscription();\r\n    this.hasMounted = false;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { onCompleted, onError } = this.props;\r\n    if (onCompleted || onError) {\r\n      const currentResult = this.queryObservable!.currentResult();\r\n      const { loading, error, data } = currentResult;\r\n      if (onCompleted && !loading && !error) {\r\n        onCompleted(data);\r\n      } else if (onError && !loading && error) {\r\n        onError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const { context } = this;\r\n    const finish = () => this.props.children(this.getQueryResult());\r\n    if (context && context.renderPromises) {\r\n      return context.renderPromises.addQueryPromise(this, finish);\r\n    }\r\n    return finish();\r\n  }\r\n\r\n  private extractOptsFromProps(props: QueryProps<TData, TVariables>) {\r\n    const {\r\n      variables,\r\n      pollInterval,\r\n      fetchPolicy,\r\n      errorPolicy,\r\n      notifyOnNetworkStatusChange,\r\n      query,\r\n      displayName = 'Query',\r\n      context = {},\r\n    } = props;\r\n\r\n    this.operation = parser(query);\r\n\r\n    invariant(\r\n      this.operation.type === DocumentType.Query,\r\n      `The <Query /> component requires a graphql query, but got a ${\r\n        this.operation.type === DocumentType.Mutation ? 'mutation' : 'subscription'\r\n      }.`,\r\n    );\r\n\r\n    return compact({\r\n      variables,\r\n      pollInterval,\r\n      query,\r\n      fetchPolicy,\r\n      errorPolicy,\r\n      notifyOnNetworkStatusChange,\r\n      metadata: { reactComponent: { displayName } },\r\n      context,\r\n    });\r\n  }\r\n\r\n  private initializeQueryObservable(props: QueryProps<TData, TVariables>) {\r\n    const opts = this.extractOptsFromProps(props);\r\n    // save for backwards compat of refetcherQueries without a recycler\r\n    this.setOperations(opts);\r\n\r\n    // See if there is an existing observable that was used to fetch the same data and\r\n    // if so, use it instead since it will contain the proper queryId to fetch\r\n    // the result set. This is used during SSR.\r\n    if (this.context && this.context.renderPromises) {\r\n      this.queryObservable = this.context.renderPromises.getSSRObservable(this);\r\n    }\r\n    if (!this.queryObservable) {\r\n      this.queryObservable = this.client.watchQuery(opts);\r\n    }\r\n  }\r\n\r\n  private setOperations(props: QueryProps<TData, TVariables>) {\r\n    if (this.context!.operations) {\r\n      this.context!.operations!.set(this.operation!.name, {\r\n        query: props.query,\r\n        variables: props.variables,\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateQuery(props: QueryProps<TData, TVariables>) {\r\n    // if we skipped initially, we may not have yet created the observable\r\n    if (!this.queryObservable) {\r\n      this.initializeQueryObservable(props);\r\n    } else {\r\n      this.setOperations(props);\r\n    }\r\n\r\n    this.queryObservable!.setOptions(this.extractOptsFromProps(props))\r\n      // The error will be passed to the child container, so we don't\r\n      // need to log it here. We could conceivably log something if\r\n      // an option was set. OTOH we don't log errors w/ the original\r\n      // query. See https://github.com/apollostack/react-apollo/issues/404\r\n      .catch(() => null);\r\n  }\r\n\r\n  private startQuerySubscription = (justMounted: boolean = false) => {\r\n    // When the `Query` component receives new props, or when we explicitly\r\n    // re-subscribe to a query using `resubscribeToQuery`, we start a new\r\n    // subscription in this method. To avoid un-necessary re-renders when\r\n    // receiving new props or re-subscribing, we track the full last\r\n    // observable result so it can be compared against incoming new data.\r\n    // We only trigger a re-render if the incoming result is different than\r\n    // the stored `lastResult`.\r\n    //\r\n    // It's important to note that when a component is first mounted,\r\n    // the `startQuerySubscription` method is also triggered. During a first\r\n    // mount, we don't want to store or use the last result, as we always\r\n    // need the first render to happen, even if there was a previous last\r\n    // result (which can happen when the same component is mounted, unmounted,\r\n    // and mounted again).\r\n    if (!justMounted) {\r\n      this.lastResult = this.queryObservable!.getLastResult();\r\n    }\r\n\r\n    if (this.querySubscription) return;\r\n\r\n    // store the initial renders worth of result\r\n    let initial: QueryResult<TData, TVariables> | undefined = this.getQueryResult();\r\n\r\n    this.querySubscription = this.queryObservable!.subscribe({\r\n      next: ({ loading, networkStatus, data }) => {\r\n        // to prevent a quick second render from the subscriber\r\n        // we compare to see if the original started finished (from cache) and is unchanged\r\n        if (initial && initial.networkStatus === 7 && shallowEqual(initial.data, data)) {\r\n          initial = undefined;\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.lastResult &&\r\n          this.lastResult.loading === loading &&\r\n          this.lastResult.networkStatus === networkStatus &&\r\n          shallowEqual(this.lastResult.data, data)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        initial = undefined;\r\n        this.updateCurrentData();\r\n      },\r\n      error: error => {\r\n        this.resubscribeToQuery();\r\n        // Quick fix for https://github.com/apollostack/react-apollo/issues/378\r\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\r\n\r\n        this.updateCurrentData();\r\n      },\r\n    });\r\n  };\r\n\r\n  private removeQuerySubscription = () => {\r\n    if (this.querySubscription) {\r\n      this.lastResult = this.queryObservable!.getLastResult();\r\n      this.querySubscription.unsubscribe();\r\n      delete this.querySubscription;\r\n    }\r\n  };\r\n\r\n  private resubscribeToQuery() {\r\n    this.removeQuerySubscription();\r\n\r\n    const lastError = this.queryObservable!.getLastError();\r\n    const lastResult = this.lastResult;\r\n\r\n    // If lastError is set, the observable will immediately\r\n    // send it, causing the stream to terminate on initialization.\r\n    // We clear everything here and restore it afterward to\r\n    // make sure the new subscription sticks.\r\n    this.queryObservable!.resetLastResults();\r\n    this.startQuerySubscription();\r\n    Object.assign(this.queryObservable!, { lastError, lastResult });\r\n  }\r\n\r\n  private updateCurrentData = () => {\r\n    // force a rerender that goes through shouldComponentUpdate\r\n    if (this.hasMounted) this.forceUpdate();\r\n  };\r\n\r\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\r\n    let data = { data: Object.create(null) as TData } as any;\r\n    // Attach bound methods\r\n    Object.assign(data, observableQueryFields(this.queryObservable!));\r\n\r\n    // When skipping a query (ie. we're not querying for data but still want\r\n    // to render children), make sure the `data` is cleared out and\r\n    // `loading` is set to `false` (since we aren't loading anything).\r\n    if (this.props.skip) {\r\n      data = {\r\n        ...data,\r\n        data: undefined,\r\n        error: undefined,\r\n        loading: false,\r\n      };\r\n    } else {\r\n      // Fetch the current result (if any) from the store.\r\n      const currentResult = this.queryObservable!.currentResult();\r\n      const { loading, partial, networkStatus, errors } = currentResult;\r\n      let { error } = currentResult;\r\n\r\n      // Until a set naming convention for networkError and graphQLErrors is\r\n      // decided upon, we map errors (graphQLErrors) to the error props.\r\n      if (errors && errors.length > 0) {\r\n        error = new ApolloError({ graphQLErrors: errors });\r\n      }\r\n\r\n      Object.assign(data, { loading, networkStatus, error });\r\n\r\n      if (loading) {\r\n        Object.assign(data.data, this.previousData, currentResult.data);\r\n      } else if (error) {\r\n        Object.assign(data, {\r\n          data: (this.queryObservable!.getLastResult() || {}).data,\r\n        });\r\n      } else {\r\n        const { fetchPolicy } = this.queryObservable!.options;\r\n        const { partialRefetch } = this.props;\r\n        if (\r\n          partialRefetch &&\r\n          Object.keys(currentResult.data).length === 0 &&\r\n          partial &&\r\n          fetchPolicy !== 'cache-only'\r\n        ) {\r\n          // When a `Query` component is mounted, and a mutation is executed\r\n          // that returns the same ID as the mounted `Query`, but has less\r\n          // fields in its result, Apollo Client's `QueryManager` returns the\r\n          // data as an empty Object since a hit can't be found in the cache.\r\n          // This can lead to application errors when the UI elements rendered by\r\n          // the original `Query` component are expecting certain data values to\r\n          // exist, and they're all of a sudden stripped away. To help avoid\r\n          // this we'll attempt to refetch the `Query` data.\r\n          Object.assign(data, { loading: true, networkStatus: NetworkStatus.loading });\r\n          data.refetch();\r\n          return data;\r\n        }\r\n\r\n        Object.assign(data.data, currentResult.data);\r\n        this.previousData = currentResult.data;\r\n      }\r\n    }\r\n\r\n    // Handle race condition where refetch is called on child mount or later\r\n    // Normal execution model:\r\n    // render(loading) -> mount -> start subscription -> get data -> render(with data)\r\n    //\r\n    // SSR with synchronous refetch:\r\n    // render(with data) -> refetch -> mount -> start subscription\r\n    //\r\n    // SSR with asynchronous refetch:\r\n    // render(with data) -> mount -> start subscription -> refetch\r\n    //\r\n    // If a subscription has not started, then the synchronous call to refetch\r\n    // must be made at a time when an active network request is being made, so\r\n    // we ensure that the network requests are deduped, to avoid an\r\n    // inconsistent UI state that displays different data for the current query\r\n    // alongside a refetched query.\r\n    //\r\n    // Once the Query component is mounted and the subscription is made, we\r\n    // always hit the network with refetch, since the components data will be\r\n    // updated and a network request is not currently active.\r\n    if (!this.querySubscription) {\r\n      const oldRefetch = (data as GraphqlQueryControls).refetch;\r\n\r\n      (data as GraphqlQueryControls).refetch = args => {\r\n        if (this.querySubscription) {\r\n          return oldRefetch(args);\r\n        } else {\r\n          return new Promise((r, f) => {\r\n            this.refetcherQueue = { resolve: r, reject: f, args };\r\n          });\r\n        }\r\n      };\r\n    }\r\n\r\n    data.client = this.client;\r\n    return data;\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, { PureQueryOptions, ApolloError, FetchPolicy } from 'apollo-client';\r\nimport { DataProxy } from 'apollo-cache';\r\nimport { invariant } from 'ts-invariant';\r\nimport { DocumentNode, GraphQLError } from 'graphql';\r\nimport shallowEqual from './utils/shallowEqual';\r\n\r\nimport { OperationVariables, RefetchQueriesProviderFn } from './types';\r\nimport { parser, DocumentType } from './parser';\r\nimport { getClient } from './component-utils';\r\n\r\nexport interface MutationResult<TData = Record<string, any>> {\r\n  data?: TData;\r\n  error?: ApolloError;\r\n  loading: boolean;\r\n  called: boolean;\r\n  client: ApolloClient<Object>;\r\n}\r\nexport interface MutationContext {\r\n  client?: ApolloClient<Object>;\r\n  operations: Map<string, { query: DocumentNode; variables: any }>;\r\n}\r\n\r\nexport interface ExecutionResult<T = Record<string, any>> {\r\n  data?: T;\r\n  extensions?: Record<string, any>;\r\n  errors?: GraphQLError[];\r\n}\r\n\r\n// Improved MutationUpdaterFn type, need to port them back to Apollo Client\r\nexport declare type MutationUpdaterFn<\r\n  T = {\r\n    [key: string]: any;\r\n  }\r\n> = (proxy: DataProxy, mutationResult: FetchResult<T>) => void;\r\n\r\nexport declare type FetchResult<\r\n  TData = Record<string, any>,\r\n  C = Record<string, any>,\r\n  E = Record<string, any>\r\n> = ExecutionResult<TData> & {\r\n  extensions?: E;\r\n  context?: C;\r\n};\r\n\r\nexport declare type MutationOptions<\r\n  TData = Record<string, any>,\r\n  TVariables = OperationVariables\r\n> = {\r\n  variables?: TVariables;\r\n  optimisticResponse?: TData;\r\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\r\n  awaitRefetchQueries?: boolean;\r\n  update?: MutationUpdaterFn<TData>;\r\n  context?: Record<string, any>;\r\n  fetchPolicy?: FetchPolicy;\r\n};\r\n\r\nexport declare type MutationFn<TData = any, TVariables = OperationVariables> = (\r\n  options?: MutationOptions<TData, TVariables>,\r\n) => Promise<void | FetchResult<TData>>;\r\n\r\nexport interface MutationProps<TData = any, TVariables = OperationVariables> {\r\n  client?: ApolloClient<Object>;\r\n  mutation: DocumentNode;\r\n  ignoreResults?: boolean;\r\n  optimisticResponse?: TData;\r\n  variables?: TVariables;\r\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\r\n  awaitRefetchQueries?: boolean;\r\n  update?: MutationUpdaterFn<TData>;\r\n  children: (\r\n    mutateFn: MutationFn<TData, TVariables>,\r\n    result: MutationResult<TData>,\r\n  ) => React.ReactNode;\r\n  onCompleted?: (data: TData) => void;\r\n  onError?: (error: ApolloError) => void;\r\n  context?: Record<string, any>;\r\n  fetchPolicy?: FetchPolicy;\r\n}\r\n\r\nexport interface MutationState<TData = any> {\r\n  called: boolean;\r\n  error?: ApolloError;\r\n  data?: TData;\r\n  loading: boolean;\r\n}\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  called: false,\r\n  error: undefined,\r\n  data: undefined,\r\n};\r\n\r\nclass Mutation<TData = any, TVariables = OperationVariables> extends React.Component<\r\n  MutationProps<TData, TVariables>,\r\n  MutationState<TData>\r\n> {\r\n  static contextTypes = {\r\n    client: PropTypes.object,\r\n    operations: PropTypes.object,\r\n  };\r\n\r\n  static propTypes = {\r\n    mutation: PropTypes.object.isRequired,\r\n    variables: PropTypes.object,\r\n    optimisticResponse: PropTypes.object,\r\n    refetchQueries: PropTypes.oneOfType([\r\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\r\n      PropTypes.func,\r\n    ]),\r\n    awaitRefetchQueries: PropTypes.bool,\r\n    update: PropTypes.func,\r\n    children: PropTypes.func.isRequired,\r\n    onCompleted: PropTypes.func,\r\n    onError: PropTypes.func,\r\n    fetchPolicy: PropTypes.string,\r\n  };\r\n\r\n  private client: ApolloClient<any>;\r\n  private mostRecentMutationId: number;\r\n\r\n  private hasMounted: boolean = false;\r\n\r\n  constructor(props: MutationProps<TData, TVariables>, context: any) {\r\n    super(props, context);\r\n    this.client = getClient(props, context);\r\n    this.verifyDocumentIsMutation(props.mutation);\r\n    this.mostRecentMutationId = 0;\r\n    this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.hasMounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.hasMounted = false;\r\n  }\r\n\r\n  componentWillReceiveProps(\r\n    nextProps: MutationProps<TData, TVariables>,\r\n    nextContext: MutationContext,\r\n  ) {\r\n    const nextClient = getClient(nextProps, nextContext);\r\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\r\n      return;\r\n    }\r\n\r\n    if (this.props.mutation !== nextProps.mutation) {\r\n      this.verifyDocumentIsMutation(nextProps.mutation);\r\n    }\r\n\r\n    if (this.client !== nextClient) {\r\n      this.client = nextClient;\r\n      this.setState(initialState);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { loading, data, error, called } = this.state;\r\n\r\n    const result = {\r\n      called,\r\n      loading,\r\n      data,\r\n      error,\r\n      client: this.client,\r\n    };\r\n\r\n    return children(this.runMutation, result);\r\n  }\r\n\r\n  private runMutation = (options: MutationOptions<TData, TVariables> = {}) => {\r\n    this.onMutationStart();\r\n    const mutationId = this.generateNewMutationId();\r\n\r\n    return this.mutate(options)\r\n      .then((response: ExecutionResult<TData>) => {\r\n        this.onMutationCompleted(response, mutationId);\r\n        return response;\r\n      })\r\n      .catch((e: ApolloError) => {\r\n        this.onMutationError(e, mutationId);\r\n        if (!this.props.onError) throw e;\r\n      });\r\n  };\r\n\r\n  private mutate = (options: MutationOptions<TData, TVariables>) => {\r\n    const {\r\n      mutation,\r\n      variables,\r\n      optimisticResponse,\r\n      update,\r\n      context = {},\r\n      awaitRefetchQueries = false,\r\n      fetchPolicy,\r\n    } = this.props;\r\n    const mutateOptions = { ...options };\r\n\r\n    let refetchQueries = mutateOptions.refetchQueries || this.props.refetchQueries;\r\n    // XXX this will be removed in the 3.0 of Apollo Client. Currently, we\r\n    // support refectching of named queries which just pulls the latest\r\n    // variables to match. This forces us to either a) keep all queries around\r\n    // to be able to iterate over and refetch, or b) [new in 2.1] keep a map of\r\n    // operations on the client where operation name => { query, variables }\r\n    //\r\n    // Going forward, we should only allow using the full operation + variables to\r\n    // refetch.\r\n    if (refetchQueries && refetchQueries.length && Array.isArray(refetchQueries)) {\r\n      refetchQueries = (refetchQueries as any).map((x: string | PureQueryOptions) => {\r\n        if (typeof x === 'string' && this.context.operations)\r\n          return this.context.operations.get(x) || x;\r\n        return x;\r\n      });\r\n      delete mutateOptions.refetchQueries;\r\n    }\r\n\r\n    const mutateVariables = Object.assign({}, variables, mutateOptions.variables);\r\n    delete mutateOptions.variables;\r\n\r\n    return this.client.mutate({\r\n      mutation,\r\n      optimisticResponse,\r\n      refetchQueries,\r\n      awaitRefetchQueries,\r\n      update,\r\n      context,\r\n      fetchPolicy,\r\n      variables: mutateVariables,\r\n      ...mutateOptions,\r\n    });\r\n  };\r\n\r\n  private onMutationStart = () => {\r\n    if (!this.state.loading && !this.props.ignoreResults) {\r\n      this.setState({\r\n        loading: true,\r\n        error: undefined,\r\n        data: undefined,\r\n        called: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  private onMutationCompleted = (response: ExecutionResult<TData>, mutationId: number) => {\r\n    const { onCompleted, ignoreResults } = this.props;\r\n\r\n    const { data, errors } = response;\r\n    const error =\r\n      errors && errors.length > 0 ? new ApolloError({ graphQLErrors: errors }) : undefined;\r\n\r\n    const callOncomplete = () => (onCompleted ? onCompleted(data as TData) : null);\r\n\r\n    if (this.hasMounted && this.isMostRecentMutation(mutationId) && !ignoreResults) {\r\n      this.setState({ loading: false, data, error }, callOncomplete);\r\n    } else {\r\n      callOncomplete();\r\n    }\r\n  };\r\n\r\n  private onMutationError = (error: ApolloError, mutationId: number) => {\r\n    const { onError } = this.props;\r\n    const callOnError = () => (onError ? onError(error) : null);\r\n\r\n    if (this.hasMounted && this.isMostRecentMutation(mutationId)) {\r\n      this.setState({ loading: false, error }, callOnError);\r\n    } else {\r\n      callOnError();\r\n    }\r\n  };\r\n\r\n  private generateNewMutationId = (): number => {\r\n    this.mostRecentMutationId = this.mostRecentMutationId + 1;\r\n    return this.mostRecentMutationId;\r\n  };\r\n\r\n  private isMostRecentMutation = (mutationId: number) => {\r\n    return this.mostRecentMutationId === mutationId;\r\n  };\r\n\r\n  private verifyDocumentIsMutation = (mutation: DocumentNode) => {\r\n    const operation = parser(mutation);\r\n    invariant(\r\n      operation.type === DocumentType.Mutation,\r\n      `The <Mutation /> component requires a graphql mutation, but got a ${\r\n        operation.type === DocumentType.Query ? 'query' : 'subscription'\r\n      }.`,\r\n    );\r\n  };\r\n}\r\n\r\nexport default Mutation;\r\n","import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, { ApolloError, FetchPolicy } from 'apollo-client';\r\nimport { Observable } from 'apollo-link';\r\nimport { DocumentNode } from 'graphql';\r\nimport { ZenObservable } from 'zen-observable-ts';\r\n\r\nimport { OperationVariables } from './types';\r\nimport { getClient } from './component-utils';\r\n\r\nimport shallowEqual from './utils/shallowEqual';\r\nimport { invariant } from 'ts-invariant';\r\n\r\nexport interface SubscriptionResult<TData = any> {\r\n  loading: boolean;\r\n  data?: TData;\r\n  error?: ApolloError;\r\n}\r\n\r\nexport interface OnSubscriptionDataOptions<TData = any> {\r\n  client: ApolloClient<Object>;\r\n  subscriptionData: SubscriptionResult<TData>;\r\n}\r\n\r\nexport interface SubscriptionProps<TData = any, TVariables = OperationVariables> {\r\n  subscription: DocumentNode;\r\n  variables?: TVariables;\r\n  fetchPolicy?: FetchPolicy;\r\n  shouldResubscribe?: any;\r\n  client?: ApolloClient<Object>;\r\n  onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\r\n  onSubscriptionComplete?: () => void;\r\n  children?: (result: SubscriptionResult<TData>) => React.ReactNode;\r\n}\r\n\r\nexport interface SubscriptionState<TData = any> {\r\n  loading: boolean;\r\n  data?: TData;\r\n  error?: ApolloError;\r\n}\r\n\r\nexport interface SubscriptionContext {\r\n  client?: ApolloClient<Object>;\r\n}\r\n\r\nclass Subscription<TData = any, TVariables = any> extends React.Component<\r\n  SubscriptionProps<TData, TVariables>,\r\n  SubscriptionState<TData>\r\n> {\r\n  static contextTypes = {\r\n    client: PropTypes.object,\r\n  };\r\n\r\n  static propTypes = {\r\n    subscription: PropTypes.object.isRequired,\r\n    variables: PropTypes.object,\r\n    children: PropTypes.func,\r\n    onSubscriptionData: PropTypes.func,\r\n    onSubscriptionComplete: PropTypes.func,\r\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\r\n  };\r\n\r\n  private client: ApolloClient<any>;\r\n  private queryObservable?: Observable<any>;\r\n  private querySubscription?: ZenObservable.Subscription;\r\n\r\n  constructor(props: SubscriptionProps<TData, TVariables>, context: SubscriptionContext) {\r\n    super(props, context);\r\n\r\n    this.client = getClient(props, context);\r\n    this.initialize(props);\r\n    this.state = this.getInitialState();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startSubscription();\r\n  }\r\n\r\n  componentWillReceiveProps(\r\n    nextProps: SubscriptionProps<TData, TVariables>,\r\n    nextContext: SubscriptionContext,\r\n  ) {\r\n    const nextClient = getClient(nextProps, nextContext);\r\n\r\n    if (\r\n      shallowEqual(this.props.variables, nextProps.variables) &&\r\n      this.client === nextClient &&\r\n      this.props.subscription === nextProps.subscription\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let shouldResubscribe = nextProps.shouldResubscribe;\r\n    if (typeof shouldResubscribe === 'function') {\r\n      shouldResubscribe = !!shouldResubscribe(this.props, nextProps);\r\n    }\r\n    const shouldNotResubscribe = shouldResubscribe === false;\r\n    if (this.client !== nextClient) {\r\n      this.client = nextClient;\r\n    }\r\n\r\n    if (!shouldNotResubscribe) {\r\n      this.endSubscription();\r\n      delete this.queryObservable;\r\n      this.initialize(nextProps);\r\n      this.startSubscription();\r\n      this.setState(this.getInitialState());\r\n      return;\r\n    }\r\n    this.initialize(nextProps);\r\n    this.startSubscription();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.endSubscription();\r\n  }\r\n\r\n  render() {\r\n    const renderFn: any = this.props.children;\r\n    if (!renderFn) return null;\r\n    const result = Object.assign({}, this.state, {\r\n      variables: this.props.variables,\r\n    });\r\n    return renderFn(result);\r\n  }\r\n\r\n  private initialize = (props: SubscriptionProps<TData, TVariables>) => {\r\n    if (this.queryObservable) return;\r\n    this.queryObservable = this.client.subscribe({\r\n      query: props.subscription,\r\n      variables: props.variables,\r\n      fetchPolicy: props.fetchPolicy,\r\n    });\r\n  };\r\n\r\n  private startSubscription = () => {\r\n    if (this.querySubscription) return;\r\n    this.querySubscription = this.queryObservable!.subscribe({\r\n      next: this.updateCurrentData,\r\n      error: this.updateError,\r\n      complete: this.completeSubscription\r\n    });\r\n  };\r\n\r\n  private getInitialState = () => ({\r\n    loading: true,\r\n    error: undefined,\r\n    data: undefined,\r\n  });\r\n\r\n  private updateCurrentData = (result: SubscriptionResult<TData>) => {\r\n    const {\r\n      client,\r\n      props: { onSubscriptionData },\r\n    } = this;\r\n    if (onSubscriptionData) onSubscriptionData({ client, subscriptionData: result });\r\n    this.setState({\r\n      data: result.data,\r\n      loading: false,\r\n      error: undefined,\r\n    });\r\n  };\r\n\r\n  private updateError = (error: any) => {\r\n    this.setState({\r\n      error,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  private completeSubscription = () => {\r\n    const { onSubscriptionComplete } = this.props;\r\n    if (onSubscriptionComplete) onSubscriptionComplete();\r\n    this.endSubscription();\r\n  };\r\n\r\n  private endSubscription = () => {\r\n    if (this.querySubscription) {\r\n      this.querySubscription.unsubscribe();\r\n      delete this.querySubscription;\r\n    }\r\n  };\r\n}\r\n\r\nexport default Subscription;\r\n","import * as React from 'react';\r\nimport { invariant } from 'ts-invariant';\r\n\r\nimport { OperationVariables } from './types';\r\nimport { DocumentType, IDocumentDefinition } from './parser';\r\n\r\nexport const defaultMapPropsToOptions = () => ({});\r\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\r\nexport const defaultMapPropsToSkip = () => false;\r\n\r\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\r\n}\r\n\r\nexport function calculateVariablesFromProps<TProps>(\r\n  operation: IDocumentDefinition,\r\n  props: TProps,\r\n) {\r\n  let variables: OperationVariables = {};\r\n  for (let { variable, type } of operation.variables) {\r\n    if (!variable.name || !variable.name.value) continue;\r\n\r\n    const variableName = variable.name.value;\r\n    const variableProp = (props as any)[variableName];\r\n\r\n    if (typeof variableProp !== 'undefined') {\r\n      variables[variableName] = variableProp;\r\n      continue;\r\n    }\r\n\r\n    // Allow optional props\r\n    if (type.kind !== 'NonNullType') {\r\n      variables[variableName] = null;\r\n    }\r\n  }\r\n  return variables;\r\n}\r\n\r\nexport type RefSetter<TChildProps> = (ref: React.ComponentClass<TChildProps>) => void | void;\r\n\r\n// base class for hocs to easily manage refs\r\nexport class GraphQLBase<TProps, TChildProps, TState = any> extends React.Component<\r\n  TProps,\r\n  TState\r\n> {\r\n  public withRef: boolean = false;\r\n  // wrapped instance\r\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\r\n\r\n  constructor(props: TProps) {\r\n    super(props);\r\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\r\n  }\r\n\r\n  getWrappedInstance() {\r\n    invariant(\r\n      this.withRef,\r\n      `To access the wrapped instance, you need to specify ` + `{ withRef: true } in the options`,\r\n    );\r\n\r\n    return this.wrappedInstance;\r\n  }\r\n\r\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\r\n    this.wrappedInstance = ref;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { ApolloError } from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\n\r\nimport { parser } from './parser';\r\nimport { OperationOption, QueryOpts, OptionProps, DataProps } from './types';\r\nimport { default as Query } from './Query';\r\nimport {\r\n  getDisplayName,\r\n  GraphQLBase,\r\n  calculateVariablesFromProps,\r\n  defaultMapPropsToOptions,\r\n  defaultMapPropsToSkip,\r\n} from './hoc-utils';\r\n\r\nexport function withQuery<\r\n  TProps extends TGraphQLVariables | {} = {},\r\n  TData = {},\r\n  TGraphQLVariables = {},\r\n  TChildProps = DataProps<TData, TGraphQLVariables>\r\n>(\r\n  document: DocumentNode,\r\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\r\n) {\r\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\r\n  const operation = parser(document);\r\n  // extract options\r\n  const {\r\n    options = defaultMapPropsToOptions,\r\n    skip = defaultMapPropsToSkip,\r\n    alias = 'Apollo',\r\n  } = operationOptions;\r\n\r\n  let mapPropsToOptions = options as (props: any) => QueryOpts;\r\n  if (typeof mapPropsToOptions !== 'function') {\r\n    mapPropsToOptions = () => options as QueryOpts;\r\n  }\r\n\r\n  let mapPropsToSkip = skip as (props: any) => boolean;\r\n  if (typeof mapPropsToSkip !== 'function') {\r\n    mapPropsToSkip = () => skip as any;\r\n  }\r\n\r\n  // allow for advanced referential equality checks\r\n  let lastResultProps: TChildProps | void;\r\n  return (\r\n    WrappedComponent: React.ComponentType<TChildProps & TProps>,\r\n  ): React.ComponentClass<TProps> => {\r\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\r\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\r\n      static displayName = graphQLDisplayName;\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      render() {\r\n        let props = this.props;\r\n        const shouldSkip = mapPropsToSkip(props);\r\n        const opts = { ...mapPropsToOptions(props) };\r\n\r\n        if (!opts.variables && operation.variables.length > 0) {\r\n          opts.variables = calculateVariablesFromProps(\r\n            operation,\r\n            props,\r\n          );\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log(opts);\r\n        return (\r\n          <Query\r\n            {...opts}\r\n            displayName={graphQLDisplayName}\r\n            skip={shouldSkip}\r\n            query={document}\r\n          >\r\n            {({ client: _, data, ...r }) => {\r\n              if (operationOptions.withRef) {\r\n                this.withRef = true;\r\n                props = Object.assign({}, props, {\r\n                  ref: this.setWrappedInstance,\r\n                });\r\n              }\r\n              // if we have skipped, no reason to manage any reshaping\r\n              if (shouldSkip) return <WrappedComponent {...props} />;\r\n              // the HOC's historically hoisted the data from the execution result\r\n              // up onto the result since it was passed as a nested prop\r\n              // we massage the Query components shape here to replicate that\r\n              const result = Object.assign(r, data || {});\r\n              const name = operationOptions.name || 'data';\r\n              let childProps = { [name]: result };\r\n              if (operationOptions.props) {\r\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\r\n                  [name]: result,\r\n                  ownProps: props as TProps,\r\n                };\r\n                lastResultProps = operationOptions.props(newResult, lastResultProps);\r\n                childProps = lastResultProps;\r\n              }\r\n\r\n              return <WrappedComponent {...props} {...childProps} />;\r\n            }}\r\n          </Query>\r\n        );\r\n      }\r\n    }\r\n\r\n    // Make sure we preserve any custom statics on the original component.\r\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { DocumentNode } from 'graphql';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\n\r\nimport { parser } from './parser';\r\nimport { MutationOpts, OperationOption, OptionProps, MutateProps } from './types';\r\nimport { default as Mutation } from './Mutation';\r\nimport {\r\n  defaultMapPropsToOptions,\r\n  getDisplayName,\r\n  calculateVariablesFromProps,\r\n  GraphQLBase,\r\n} from './hoc-utils';\r\n\r\nexport function withMutation<\r\n  TProps extends TGraphQLVariables | {} = {},\r\n  TData = {},\r\n  TGraphQLVariables = {},\r\n  TChildProps = MutateProps<TData, TGraphQLVariables>\r\n>(\r\n  document: DocumentNode,\r\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\r\n) {\r\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\r\n  const operation = parser(document);\r\n  // extract options\r\n\r\n  const { options = defaultMapPropsToOptions, alias = 'Apollo' } = operationOptions;\r\n\r\n  let mapPropsToOptions = options as (props: any) => MutationOpts;\r\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = () => options as MutationOpts;\r\n\r\n  return (\r\n    WrappedComponent: React.ComponentType<TChildProps & TProps>,\r\n  ): React.ComponentClass<TProps> => {\r\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\r\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\r\n      static displayName = graphQLDisplayName;\r\n      static WrappedComponent = WrappedComponent;\r\n      render() {\r\n        let props = this.props;\r\n        const opts = mapPropsToOptions(props);\r\n\r\n        if (operationOptions.withRef) {\r\n          this.withRef = true;\r\n          props = Object.assign({}, props, {\r\n            ref: this.setWrappedInstance,\r\n          });\r\n        }\r\n        if (!opts.variables && operation.variables.length > 0) {\r\n          opts.variables = calculateVariablesFromProps(\r\n            operation,\r\n            props,\r\n          );\r\n        }\r\n\r\n        return (\r\n          <Mutation {...opts} mutation={document} ignoreResults>\r\n            {(mutate, _result) => {\r\n              const name = operationOptions.name || 'mutate';\r\n              let childProps = { [name]: mutate };\r\n              if (operationOptions.props) {\r\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\r\n                  [name]: mutate,\r\n                  ownProps: props,\r\n                };\r\n                childProps = operationOptions.props(newResult) as any;\r\n              }\r\n\r\n              return <WrappedComponent {...props} {...childProps} />;\r\n            }}\r\n          </Mutation>\r\n        );\r\n      }\r\n    }\r\n\r\n    // Make sure we preserve any custom statics on the original component.\r\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { DocumentNode } from 'graphql';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\n\r\nimport { parser } from './parser';\r\nimport { OperationOption, QueryOpts, OptionProps, DataProps } from './types';\r\nimport { default as Subscription } from './Subscriptions';\r\nimport {\r\n  getDisplayName,\r\n  GraphQLBase,\r\n  calculateVariablesFromProps,\r\n  defaultMapPropsToOptions,\r\n  defaultMapPropsToSkip,\r\n} from './hoc-utils';\r\n\r\nexport function withSubscription<\r\n  TProps extends TGraphQLVariables | {} = {},\r\n  TData = {},\r\n  TGraphQLVariables = {},\r\n  TChildProps = DataProps<TData, TGraphQLVariables>\r\n>(\r\n  document: DocumentNode,\r\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\r\n) {\r\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\r\n  const operation = parser(document);\r\n  // extract options\r\n  const {\r\n    options = defaultMapPropsToOptions,\r\n    skip = defaultMapPropsToSkip,\r\n    alias = 'Apollo',\r\n    shouldResubscribe,\r\n  } = operationOptions;\r\n\r\n  let mapPropsToOptions = options as (props: any) => QueryOpts;\r\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = () => options as QueryOpts;\r\n\r\n  let mapPropsToSkip = skip as (props: any) => boolean;\r\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\r\n\r\n  // allow for advanced referential equality checks\r\n  let lastResultProps: TChildProps | void;\r\n  return (\r\n    WrappedComponent: React.ComponentType<TChildProps & TProps>,\r\n  ): React.ComponentClass<TProps> => {\r\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\r\n    class GraphQL extends GraphQLBase<TProps, TChildProps, { resubscribe: boolean }> {\r\n      static displayName = graphQLDisplayName;\r\n      static WrappedComponent = WrappedComponent;\r\n      constructor(props: TProps) {\r\n        super(props);\r\n        this.state = { resubscribe: false };\r\n      }\r\n      componentWillReceiveProps(nextProps: TProps) {\r\n        if (!shouldResubscribe) return;\r\n        this.setState({\r\n          resubscribe: shouldResubscribe(this.props, nextProps),\r\n        });\r\n      }\r\n\r\n      render() {\r\n        let props = this.props;\r\n        const shouldSkip = mapPropsToSkip(props);\r\n        const opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\r\n\r\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\r\n          opts.variables = calculateVariablesFromProps(\r\n            operation,\r\n            props,\r\n          );\r\n        }\r\n        return (\r\n          <Subscription\r\n            {...opts}\r\n            displayName={graphQLDisplayName}\r\n            skip={shouldSkip}\r\n            subscription={document}\r\n            shouldResubscribe={this.state.resubscribe}\r\n          >\r\n            {({ data, ...r }) => {\r\n              if (operationOptions.withRef) {\r\n                this.withRef = true;\r\n                props = Object.assign({}, props, {\r\n                  ref: this.setWrappedInstance,\r\n                });\r\n              }\r\n              // if we have skipped, no reason to manage any reshaping\r\n              if (shouldSkip) return <WrappedComponent {...props} />;\r\n              // the HOC's historically hoisted the data from the execution result\r\n              // up onto the result since it was passed as a nested prop\r\n              // we massage the Query components shape here to replicate that\r\n              const result = Object.assign(r, data || {});\r\n              const name = operationOptions.name || 'data';\r\n              let childProps = { [name]: result };\r\n              if (operationOptions.props) {\r\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\r\n                  [name]: result,\r\n                  ownProps: props as TProps,\r\n                };\r\n                lastResultProps = operationOptions.props(newResult, lastResultProps);\r\n                childProps = lastResultProps;\r\n              }\r\n\r\n              return <WrappedComponent {...props} {...childProps} />;\r\n            }}\r\n          </Subscription>\r\n        );\r\n      }\r\n    }\r\n\r\n    // Make sure we preserve any custom statics on the original component.\r\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { DocumentNode } from 'graphql';\r\nimport { parser, DocumentType } from './parser';\r\nimport { OperationOption, DataProps, MutateProps } from './types';\r\n\r\nimport { withQuery } from './query-hoc';\r\nimport { withMutation } from './mutation-hoc';\r\nimport { withSubscription } from './subscription-hoc';\r\n\r\nexport function graphql<\r\n  TProps extends TGraphQLVariables | {} = {},\r\n  TData = {},\r\n  TGraphQLVariables = {},\r\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\r\n    Partial<MutateProps<TData, TGraphQLVariables>>\r\n>(\r\n  document: DocumentNode,\r\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\r\n) {\r\n  switch (parser(document).type) {\r\n    case DocumentType.Mutation:\r\n      return withMutation(document, operationOptions);\r\n    case DocumentType.Subscription:\r\n      return withSubscription(document, operationOptions);\r\n    // case DocumentType.Fragment:\r\n    //   throw new Error('fragments cannont currently be used on their own');\r\n    case DocumentType.Query:\r\n    default:\r\n      return withQuery(document, operationOptions);\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { OperationOption } from './types';\r\nimport ApolloConsumer from './ApolloConsumer';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\n\r\nimport { invariant } from 'ts-invariant';\r\n\r\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\r\n}\r\n\r\nexport type WithApolloClient<P> = P & { client: ApolloClient<any> };\r\n\r\nexport default function withApollo<TProps, TResult = any>(\r\n  WrappedComponent: React.ComponentType<WithApolloClient<TProps>>,\r\n  operationOptions: OperationOption<TProps, TResult> = {},\r\n): React.ComponentClass<TProps> {\r\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\r\n\r\n  class WithApollo extends React.Component<TProps> {\r\n    static displayName = withDisplayName;\r\n    static WrappedComponent = WrappedComponent;\r\n\r\n    // wrapped instance\r\n    private wrappedInstance: any;\r\n\r\n    constructor(props: TProps) {\r\n      super(props);\r\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\r\n    }\r\n\r\n    getWrappedInstance() {\r\n      invariant(\r\n        operationOptions.withRef,\r\n        `To access the wrapped instance, you need to specify ` + `{ withRef: true } in the options`,\r\n      );\r\n\r\n      return this.wrappedInstance;\r\n    }\r\n\r\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\r\n      this.wrappedInstance = ref;\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <ApolloConsumer>\r\n          {client => {\r\n            const props = Object.assign({}, this.props, {\r\n              client,\r\n              ref: operationOptions.withRef ? this.setWrappedInstance : undefined,\r\n            });\r\n            return <WrappedComponent {...props} />;\r\n          }}\r\n        </ApolloConsumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Make sure we preserve any custom statics on the original component.\r\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\r\n}\r\n","import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport Query from './Query';\r\nimport { ObservableQuery } from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\n\r\ntype QueryInfo = {\r\n  seen: boolean;\r\n  observable: ObservableQuery<any, any> | null;\r\n}\r\n\r\nfunction makeDefaultQueryInfo(): QueryInfo {\r\n  return {\r\n    seen: false,\r\n    observable: null,\r\n  };\r\n}\r\n\r\nexport class RenderPromises {\r\n  // Map from Query component instances to pending fetchData promises.\r\n  private queryPromises = new Map<Query<any, any>, Promise<any>>();\r\n\r\n  // Two-layered map from (query document, stringified variables) to QueryInfo\r\n  // objects. These QueryInfo objects are intended to survive through the whole\r\n  // getMarkupFromTree process, whereas specific Query instances do not survive\r\n  // beyond a single call to renderToStaticMarkup.\r\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\r\n\r\n  // Registers the server side rendered observable.\r\n  public registerSSRObservable<TData, TVariables>(\r\n    queryInstance: Query<TData, TVariables>,\r\n    observable: ObservableQuery<any, TVariables>,\r\n  ) {\r\n    this.lookupQueryInfo(queryInstance).observable = observable;\r\n  }\r\n\r\n  // Get's the cached observable that matches the SSR Query instances query and variables.\r\n  public getSSRObservable<TData, TVariables>(queryInstance: Query<TData, TVariables>) {\r\n    return this.lookupQueryInfo(queryInstance).observable;\r\n  }\r\n\r\n  public addQueryPromise<TData, TVariables>(\r\n    queryInstance: Query<TData, TVariables>,\r\n    finish: () => React.ReactNode,\r\n  ): React.ReactNode {\r\n    const info = this.lookupQueryInfo(queryInstance);\r\n    if (!info.seen) {\r\n      this.queryPromises.set(\r\n        queryInstance,\r\n        new Promise(resolve => {\r\n          resolve(queryInstance.fetchData());\r\n        }),\r\n      );\r\n      // Render null to abandon this subtree for this rendering, so that we\r\n      // can wait for the data to arrive.\r\n      return null;\r\n    }\r\n    return finish();\r\n  }\r\n\r\n  public hasPromises() {\r\n    return this.queryPromises.size > 0;\r\n  }\r\n\r\n  public consumeAndAwaitPromises() {\r\n    const promises: Promise<any>[] = [];\r\n    this.queryPromises.forEach((promise, queryInstance) => {\r\n      // Make sure we never try to call fetchData for this query document and\r\n      // these variables again. Since the queryInstance objects change with\r\n      // every rendering, deduplicating them by query and variables is the\r\n      // best we can do. If a different Query component happens to have the\r\n      // same query document and variables, it will be immediately rendered\r\n      // by calling finish() in addQueryPromise, which could result in the\r\n      // rendering of an unwanted loading state, but that's not nearly as bad\r\n      // as getting stuck in an infinite rendering loop because we kept calling\r\n      // queryInstance.fetchData for the same Query component indefinitely.\r\n      this.lookupQueryInfo(queryInstance).seen = true;\r\n      promises.push(promise);\r\n    });\r\n    this.queryPromises.clear();\r\n    return Promise.all(promises);\r\n  }\r\n\r\n  private lookupQueryInfo<TData, TVariables>(\r\n    queryInstance: Query<TData, TVariables>,\r\n  ): QueryInfo {\r\n    const { queryInfoTrie } = this;\r\n    const { query, variables } = queryInstance.props;\r\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\r\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\r\n    const variablesString = JSON.stringify(variables);\r\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\r\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\r\n    return info;\r\n  }\r\n}\r\n\r\nexport default function getDataFromTree(\r\n  tree: React.ReactNode,\r\n  context: { [key: string]: any } = {},\r\n) {\r\n  return getMarkupFromTree({\r\n    tree,\r\n    context,\r\n    // If you need to configure this renderFunction, call getMarkupFromTree\r\n    // directly instead of getDataFromTree.\r\n    renderFunction: require(\"react-dom/server\").renderToStaticMarkup,\r\n  });\r\n}\r\n\r\nexport type GetMarkupFromTreeOptions = {\r\n  tree: React.ReactNode;\r\n  context?: { [key: string]: any };\r\n  renderFunction?: (tree: React.ReactElement<any>) => string;\r\n};\r\n\r\nexport function getMarkupFromTree({\r\n  tree,\r\n  context = {},\r\n  // The rendering function is configurable! We use renderToStaticMarkup as\r\n  // the default, because it's a little less expensive than renderToString,\r\n  // and legacy usage of getDataFromTree ignores the return value anyway.\r\n  renderFunction = require(\"react-dom/server\").renderToStaticMarkup,\r\n}: GetMarkupFromTreeOptions): Promise<string> {\r\n  const renderPromises = new RenderPromises();\r\n\r\n  class RenderPromisesProvider extends React.Component {\r\n    static childContextTypes: { [key: string]: any } = {\r\n      renderPromises: PropTypes.object,\r\n    };\r\n\r\n    getChildContext() {\r\n      return { ...context, renderPromises };\r\n    }\r\n\r\n    render() {\r\n      // Always re-render from the rootElement, even though it might seem\r\n      // better to render the children of the component responsible for the\r\n      // promise, because it is not possible to reconstruct the full context\r\n      // of the original rendering (including all unknown context provider\r\n      // elements) for a subtree of the orginal component tree.\r\n      return tree;\r\n    }\r\n  }\r\n\r\n  Object.keys(context).forEach(key => {\r\n    RenderPromisesProvider.childContextTypes[key] = PropTypes.any;\r\n  });\r\n\r\n  function process(): Promise<string> | string {\r\n    const html = renderFunction(React.createElement(RenderPromisesProvider));\r\n    return renderPromises.hasPromises()\r\n      ? renderPromises.consumeAndAwaitPromises().then(process)\r\n      : html;\r\n  }\r\n\r\n  return Promise.resolve().then(process);\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { getMarkupFromTree } from './getDataFromTree';\r\n\r\nexport function renderToStringWithData(component: ReactElement<any>): Promise<string> {\r\n  return getMarkupFromTree({\r\n    tree: component,\r\n    renderFunction: require(\"react-dom/server\").renderToString,\r\n  });\r\n}\r\n","export function compose(...funcs: Function[]) {\r\n  const functions = funcs.reverse();\r\n  return function (...args: any[]) {\r\n    const [firstFunction, ...restFunctions] = functions\r\n    let result = firstFunction.apply(null, args);\r\n    restFunctions.forEach((fnc) => {\r\n      result = fnc.call(null, result)\r\n    });\r\n    return result;\r\n  }\r\n}\r\n"],"names":["PropTypes.object","PropTypes.func","tslib_1.__extends","PropTypes.node","PropTypes.string","PropTypes.bool","PropTypes.number","React.Component","PropTypes.oneOfType","PropTypes.arrayOf","React.createElement","getDisplayName","PropTypes.any"],"mappings":";;;;;;AAUA,IAAM,cAAc,GAAkD,UAAC,KAAK,EAAE,OAAO;IACnF,WACG,CAAC,QAAQ;IAIZ,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;CACvC,CAAC;AAEF,cAAc,CAAC,YAAY,GAAG;IAC5B,MAAM,EAAEA,MAAgB,CAAC,UAAU;CACpC,CAAC;AAEF,cAAc,CAAC,SAAS,GAAG;IACzB,QAAQ,EAAEC,IAAc,CAAC,UAAU;CACpC,CAAC;;ACzBF;;;;;;;;;;;;;;;;AAgBA,IAAI,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE;IAC/B,aAAa,GAAG,MAAM,CAAC,cAAc;SAChC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;QAC5E,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/E,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CAC9B,CAAC;;AAEF,AAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IACvC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;CACxF;;AAED,AAAO,IAAI,QAAQ,GAAG,WAAW;IAC7B,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,QAAQ,CAAC,CAAC,EAAE;QAC7C,KAAK,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjD,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YACjB,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAChF;QACD,OAAO,CAAC,CAAC;MACZ;IACD,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EAC1C;;AAED,AAAO,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IACzB,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QAC/E,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,MAAM,CAAC,qBAAqB,KAAK,UAAU;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC3F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,OAAO,CAAC,CAAC;CACZ;;ACnCD;IAAoDC,kCAAsC;IAaxF,wBAAY,KAAkC,EAAE,OAAY;QAA5D,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SActB;QAjBO,gBAAU,GAAyD,IAAI,GAAG,EAAE,CAAC;QAKnF;YAGI,qDAAqD,CACxD,CAAC;QAKF,IAAI,CAAE,KAAK,CAAC,MAAc,CAAC,oBAAoB,EAAE;YAC9C,KAAK,CAAC,MAAc,CAAC,oBAAoB,GAAG,KAAI,CAAC,UAAU,CAAC;SAC9D;;KACF;IAED,wCAAe,GAAf;QACE,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,UAAU,EAAG,IAAI,CAAC,KAAK,CAAC,MAAc,CAAC,oBAAoB;SAC5D,CAAC;KACH;IAED,+BAAM,GAAN;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;KAC5B;IAtCM,wBAAS,GAAG;QACjB,MAAM,EAAEF,MAAgB,CAAC,UAAU;QACnC,QAAQ,EAAEG,IAAc,CAAC,UAAU;KACpC,CAAC;IAEK,gCAAiB,GAAG;QACzB,MAAM,EAAEH,MAAgB,CAAC,UAAU;QACnC,UAAU,EAAEA,MAAgB;KAC7B,CAAC;IA+BJ,qBAAC;CAAA,CAxCmD,SAAS,GAwC5D;;AC5CD,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,iDAAK,CAAA;IACL,uDAAQ,CAAA;IACR,+DAAY,CAAA;CACb,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAQD,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAGxB,SAAgB,MAAM,CAAC,QAAsB;IAC3C,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;IAE1B,IAAI,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;IAO1B,WACG,CAAC,QAAQ,KAAK,yCAEQ;QACrB,oEAAoE;QACpE,2CAA2C,CAC9C,CAAC;IAEF,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,oBAAoB,GAAA,CACvD,CAAC;IAEF,IAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CACzC,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,OAAO,GAAA,CACnF,CAAC;IAEF,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,UAAU,GAAA,CACtF,CAAC;IAEF,IAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC/C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,cAAc,GAAA,CAC1F,CAAC;IAEF,WACG,SAAS,oBAAoB;QAE5B,4DAA4D;4BAIhD,YAAY,OAAO,2BAA2B;;yCAI5B;;yCAIG,OAAO;QACxC;QAAsC,oBAAoB,YAAY,CAAC;IAE3E,IAAM,6BAA6B,CAAC;wCAKlC;8CACuC;+EACkC;qBAGxD;;IAGnB,IAAI,UAAU;0BACM;;;;;QAKd,OAAO;;IAEb,cAAc;;;;;SCvFA,SAAS,CACvB,KAA2B,EAC3B,OAA+B;IAE/B,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC;IAE9C,WACG,CAAC,QACF;QACE,6DAA6D;QAC7D,qCAAqC,CACxC,CAAC;IAEF,OAAO,MAA8B,CAAC;CACvC;;ACzBO,IAAA,gDAAc,CAAsB;AAE5C,SAAS,EAAE,CAAC,CAAM,EAAE,CAAM;IACxB,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC9C;IACD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CAC3B;AAED,SAAS,QAAQ,CAAC,GAAQ;IACxB,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;CAChD;AAED,SAAwB,YAAY,CAAC,IAAS,EAAE,IAAS;IACvD,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtC,OAAO,KAAK,CAAC;KACd;IAED,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;QAC5C,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC,KAAK,CACf,UAAA,GAAG,IAAI,OAAA,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAA,CAClE,CAAC;CACH;;ACED,SAAS,OAAO,CAAC,GAAQ;IACvB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAC5B,UAAC,GAAG,EAAE,GAAG;QACP,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YAC1B,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACrB;QAED,OAAO,GAAG,CAAC;KACZ,EACD,EAAS,CACV,CAAC;CACH;AAED,SAAS,qBAAqB,CAC5B,UAAkC;IAElC,IAAM,MAAM,GAAG;QACb,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;QAC5C,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC;QAChD,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;QACpD,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;QACtD,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;QACpD,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC;KAC7D,CAAC;IAIF,OAAO,MAAkD,CAAC;CAC3D;AAkCD;IAAiFE,yBAEhF;IAyCC,eAAY,KAAoC,EAAE,OAAqB;QAAvE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAItB;QAhBO,kBAAY,GAAQ,EAAE,CAAC;QAOvB,gBAAU,GAAY,KAAK,CAAC;QAE5B,gBAAU,GAAoC,IAAI,CAAC;QA+LnD,4BAAsB,GAAG,UAAC,WAA4B;YAA5B,4BAAA,EAAA,mBAA4B;YAe5D,IAAI,CAAC,WAAW,EAAE;gBAChB,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;aACzD;YAED,IAAI,KAAI,CAAC,iBAAiB;gBAAE,OAAO;YAGnC,IAAI,OAAO,GAA+C,KAAI,CAAC,cAAc,EAAE,CAAC;YAEhF,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,eAAgB,CAAC,SAAS,CAAC;gBACvD,IAAI,EAAE,UAAC,EAAgC;wBAA9B,oBAAO,EAAE,gCAAa,EAAE,cAAI;oBAGnC,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,KAAK,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;wBAC9E,OAAO,GAAG,SAAS,CAAC;wBACpB,OAAO;qBACR;oBAED,IACE,KAAI,CAAC,UAAU;wBACf,KAAI,CAAC,UAAU,CAAC,OAAO,KAAK,OAAO;wBACnC,KAAI,CAAC,UAAU,CAAC,aAAa,KAAK,aAAa;wBAC/C,YAAY,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,EACxC;wBACA,OAAO;qBACR;oBAED,OAAO,GAAG,SAAS,CAAC;oBACpB,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;gBACD,KAAK,EAAE,UAAA,KAAK;oBACV,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAE1B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAC;wBAAE,MAAM,KAAK,CAAC;oBAExD,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;aACF,CAAC,CAAC;SACJ,CAAC;QAEM,6BAAuB,GAAG;YAChC,IAAI,KAAI,CAAC,iBAAiB,EAAE;gBAC1B,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;gBACxD,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBACrC,OAAO,KAAI,CAAC,iBAAiB,CAAC;aAC/B;SACF,CAAC;QAiBM,uBAAiB,GAAG;YAE1B,IAAI,KAAI,CAAC,UAAU;gBAAE,KAAI,CAAC,WAAW,EAAE,CAAC;SACzC,CAAC;QAEM,oBAAc,GAAG;YACvB,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAU,EAAS,CAAC;YAEzD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,CAAC,KAAI,CAAC,eAAgB,CAAC,CAAC,CAAC;YAKlE,IAAI,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE;gBACnB,IAAI,gBACC,IAAI,IACP,IAAI,EAAE,SAAS,EACf,KAAK,EAAE,SAAS,EAChB,OAAO,EAAE,KAAK,GACf,CAAC;aACH;iBAAM;gBAEL,IAAM,aAAa,GAAG,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;gBACpD,IAAA,+BAAO,EAAE,+BAAO,EAAE,2CAAa,EAAE,6BAAM,CAAmB;gBAC5D,IAAA,2BAAK,CAAmB;gBAI9B,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC/B,KAAK,GAAG,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,CAAC;iBACpD;gBAED,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,SAAA,EAAE,aAAa,eAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;gBAEvD,IAAI,OAAO,EAAE;oBACX,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAI,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;iBACjE;qBAAM,IAAI,KAAK,EAAE;oBAChB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;wBAClB,IAAI,EAAE,CAAC,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,IAAI,EAAE,EAAE,IAAI;qBACzD,CAAC,CAAC;iBACJ;qBAAM;oBACG,IAAA,uDAAW,CAAmC;oBAC9C,IAAA,2CAAc,CAAgB;oBACtC,IACE,cAAc;wBACd,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC;wBAC5C,OAAO;wBACP,WAAW,KAAK,YAAY,EAC5B;wBASA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;wBAC7E,IAAI,CAAC,OAAO,EAAE,CAAC;wBACf,OAAO,IAAI,CAAC;qBACb;oBAED,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;oBAC7C,KAAI,CAAC,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC;iBACxC;aACF;YAqBD,IAAI,CAAC,KAAI,CAAC,iBAAiB,EAAE;gBAC3B,IAAM,YAAU,GAAI,IAA6B,CAAC,OAAO,CAAC;gBAEzD,IAA6B,CAAC,OAAO,GAAG,UAAA,IAAI;oBAC3C,IAAI,KAAI,CAAC,iBAAiB,EAAE;wBAC1B,OAAO,YAAU,CAAC,IAAI,CAAC,CAAC;qBACzB;yBAAM;wBACL,OAAO,IAAI,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;4BACtB,KAAI,CAAC,cAAc,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;yBACvD,CAAC,CAAC;qBACJ;iBACF,CAAC;aACH;YAED,IAAI,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAC1B,OAAO,IAAI,CAAC;SACb,CAAC;QA9WA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;;KACvC;IAGD,yBAAS,GAAT;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAGlC,IAAM,eAUQ,EATZ,sBAAQ,EACR,YAAG,EACH,4BAAW,EACX,cAAI,EACJ,kBAAM,EACN,4BAAW,EACX,oBAAO,EACP,kCAAc,EACd,mHACY,CAAC;QAET,IAAA,8BAAW,CAAU;QAC3B,IAAI,GAAG,KAAK,KAAK;YAAE,OAAO,KAAK,CAAC;QAChC,IAAI,WAAW,KAAK,cAAc,IAAI,WAAW,KAAK,mBAAmB,EAAE;YACzE,WAAW,GAAG,aAAa,CAAC;SAC7B;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,cACpC,IAAI,IACP,WAAW,aAAA,IACX,CAAC;QAGH,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SACrE;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;QAErD,OAAO,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;KACrD;IAED,iCAAiB,GAAjB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,OAAO;QAE5B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,cAAc,EAAE;YACjB,IAAA,wBAA+C,EAA7C,cAAI,EAAE,oBAAO,EAAE,kBAA8B,CAAC;YACtD,IAAI,CAAC,eAAgB,CAAC,OAAO,CAAC,IAAI,CAAC;iBAChC,IAAI,CAAC,OAAO,CAAC;iBACb,KAAK,CAAC,MAAM,CAAC,CAAC;SAClB;KACF;IAED,yCAAyB,GAAzB,UAA0B,SAAwC,EAAE,WAAyB;QAE3F,IAAI,SAAS,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACtC,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,OAAO;SACR;QAED,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAErD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACrE,OAAO;SACR;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAE;YACxC,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,SAAS,CAAC,IAAI;YAAE,OAAO;QAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAC;KAC/B;IAED,oCAAoB,GAApB;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,kCAAkB,GAAlB;QACQ,IAAA,eAAqC,EAAnC,4BAAW,EAAE,oBAAsB,CAAC;QAC5C,IAAI,WAAW,IAAI,OAAO,EAAE;YAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;YACpD,IAAA,+BAAO,EAAE,2BAAK,EAAE,yBAAI,CAAmB;YAC/C,IAAI,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,EAAE;gBACrC,WAAW,CAAC,IAAI,CAAC,CAAC;aACnB;iBAAM,IAAI,OAAO,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;gBACvC,OAAO,CAAC,KAAK,CAAC,CAAC;aAChB;SACF;KACF;IAED,sBAAM,GAAN;QAAA,iBAOC;QANS,IAAA,sBAAO,CAAU;QACzB,IAAM,MAAM,GAAG,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,cAAc,EAAE,CAAC,GAAA,CAAC;QAChE,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc,EAAE;YACrC,OAAO,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC7D;QACD,OAAO,MAAM,EAAE,CAAC;KACjB;IAEO,oCAAoB,GAA5B,UAA6B,KAAoC;QAE7D,IAAA,2BAAS,EACT,iCAAY,EACZ,+BAAW,EACX,+BAAW,EACX,+DAA2B,EAC3B,mBAAK,EACL,sBAAqB,EAArB,0CAAqB,EACrB,kBAAY,EAAZ,iCAAY,CACJ;QAEV,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAE/B,yBACiB,6BACf,kEACE,KAAK;QAIT,OAAO,OAAO,CAAC;YACb,SAAS,WAAA;YACT,YAAY,cAAA;YACZ,KAAK,OAAA;YACL,WAAW,aAAA;YACX,WAAW,aAAA;YACX,2BAA2B,6BAAA;YAC3B,QAAQ,EAAE,EAAE,cAAc,EAAE,EAAE,WAAW,aAAA,EAAE,EAAE;YAC7C,OAAO,SAAA;SACR,CAAC,CAAC;KACJ;IAEO,yCAAyB,GAAjC,UAAkC,KAAoC;QACpE,IAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAE9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAKzB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACrD;KACF;IAEO,6BAAa,GAArB,UAAsB,KAAoC;QACxD,IAAI,IAAI,CAAC,OAAQ,CAAC,UAAU,EAAE;YAC5B,IAAI,CAAC,OAAQ,CAAC,UAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAU,CAAC,IAAI,EAAE;gBAClD,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,SAAS,EAAE,KAAK,CAAC,SAAS;aAC3B,CAAC,CAAC;SACJ;KACF;IAEO,2BAAW,GAAnB,UAAoB,KAAoC;QAEtD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,eAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aAK/D,KAAK,CAAC,cAAM,OAAA,IAAI,GAAA,CAAC,CAAC;KACtB;IAiEO,kCAAkB,GAA1B;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAE/B,IAAM,SAAS,GAAG,IAAI,CAAC,eAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAMnC,IAAI,CAAC,eAAgB,CAAC,gBAAgB,EAAE,CAAC;QACzC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAgB,EAAE,EAAE,SAAS,WAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;KACjE;IAjTM,kBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;QACxB,UAAU,EAAEA,MAAgB;QAC5B,cAAc,EAAEA,MAAgB;KACjC,CAAC;IAEK,eAAS,GAAG;QACjB,MAAM,EAAEA,MAAgB;QACxB,QAAQ,EAAEC,IAAc,CAAC,UAAU;QACnC,WAAW,EAAEG,MAAgB;QAC7B,2BAA2B,EAAEC,IAAc;QAC3C,WAAW,EAAEJ,IAAc;QAC3B,OAAO,EAAEA,IAAc;QACvB,YAAY,EAAEK,MAAgB;QAC9B,KAAK,EAAEN,MAAgB,CAAC,UAAU;QAClC,SAAS,EAAEA,MAAgB;QAC3B,GAAG,EAAEK,IAAc;QACnB,cAAc,EAAEA,IAAc;KAC/B,CAAC;IAwYJ,YAAC;CA7ZD,CAAiFE,SAAe,GA6Z/F;;ACpaD,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,SAAS;IAChB,IAAI,EAAE,SAAS;CAChB,CAAC;AAEF;IAAqEL,4BAGpE;IA2BC,kBAAY,KAAuC,EAAE,OAAY;QAAjE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAKtB;QARO,gBAAU,GAAY,KAAK,CAAC;QAoD5B,iBAAW,GAAG,UAAC,OAAgD;YAAhD,wBAAA,EAAA,YAAgD;YACrE,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,UAAU,GAAG,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAEhD,OAAO,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC;iBACxB,IAAI,CAAC,UAAC,QAAgC;gBACrC,KAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC/C,OAAO,QAAQ,CAAC;aACjB,CAAC;iBACD,KAAK,CAAC,UAAC,CAAc;gBACpB,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO;oBAAE,MAAM,CAAC,CAAC;aAClC,CAAC,CAAC;SACN,CAAC;QAEM,YAAM,GAAG,UAAC,OAA2C;YACrD,IAAA,gBAQQ,EAPZ,sBAAQ,EACR,wBAAS,EACT,0CAAkB,EAClB,kBAAM,EACN,eAAY,EAAZ,iCAAY,EACZ,2BAA2B,EAA3B,gDAA2B,EAC3B,4BACY,CAAC;YACf,IAAM,aAAa,gBAAQ,OAAO,CAAE,CAAC;YAErC,IAAI,cAAc,GAAG,aAAa,CAAC,cAAc,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAS/E,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBAC5E,cAAc,GAAI,cAAsB,CAAC,GAAG,CAAC,UAAC,CAA4B;oBACxE,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU;wBAClD,OAAO,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC7C,OAAO,CAAC,CAAC;iBACV,CAAC,CAAC;gBACH,OAAO,aAAa,CAAC,cAAc,CAAC;aACrC;YAED,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;YAC9E,OAAO,aAAa,CAAC,SAAS,CAAC;YAE/B,OAAO,KAAI,CAAC,MAAM,CAAC,MAAM,YACvB,QAAQ,UAAA;gBACR,kBAAkB,oBAAA;gBAClB,cAAc,gBAAA;gBACd,mBAAmB,qBAAA;gBACnB,MAAM,QAAA;gBACN,OAAO,SAAA;gBACP,WAAW,aAAA,EACX,SAAS,EAAE,eAAe,IACvB,aAAa,EAChB,CAAC;SACJ,CAAC;QAEM,qBAAe,GAAG;YACxB,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACpD,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,IAAI;oBACb,KAAK,EAAE,SAAS;oBAChB,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC;aACJ;SACF,CAAC;QAEM,yBAAmB,GAAG,UAAC,QAAgC,EAAE,UAAkB;YAC3E,IAAA,gBAA2C,EAAzC,4BAAW,EAAE,gCAA4B,CAAC;YAE1C,IAAA,oBAAI,EAAE,wBAAM,CAAc;YAClC,IAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC;YAEvF,IAAM,cAAc,GAAG,cAAM,QAAC,WAAW,GAAG,WAAW,CAAC,IAAa,CAAC,GAAG,IAAI,IAAC,CAAC;YAE/E,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC9E,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,EAAE,cAAc,CAAC,CAAC;aAChE;iBAAM;gBACL,cAAc,EAAE,CAAC;aAClB;SACF,CAAC;QAEM,qBAAe,GAAG,UAAC,KAAkB,EAAE,UAAkB;YACvD,IAAA,6BAAO,CAAgB;YAC/B,IAAM,WAAW,GAAG,cAAM,QAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,IAAC,CAAC;YAE5D,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;gBAC5D,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,OAAA,EAAE,EAAE,WAAW,CAAC,CAAC;aACvD;iBAAM;gBACL,WAAW,EAAE,CAAC;aACf;SACF,CAAC;QAEM,2BAAqB,GAAG;YAC9B,KAAI,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC1D,OAAO,KAAI,CAAC,oBAAoB,CAAC;SAClC,CAAC;QAEM,0BAAoB,GAAG,UAAC,UAAkB;YAChD,OAAO,KAAI,CAAC,oBAAoB,KAAK,UAAU,CAAC;SACjD,CAAC;QAEM,8BAAwB,GAAG,UAAC,QAAsB;YACxD,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,oBACY,8BAA8B;SAK3C,CAAC;QApKA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9C,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;KAC3B;IAED,oCAAiB,GAAjB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;IAED,uCAAoB,GAApB;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,4CAAyB,GAAzB,UACE,SAA2C,EAC3C,WAA4B;QAE5B,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACrD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACrE,OAAO;SACR;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;YAC9C,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACnD;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC7B;KACF;IAED,yBAAM,GAAN;QACU,IAAA,8BAAQ,CAAgB;QAC1B,IAAA,eAA6C,EAA3C,oBAAO,EAAE,cAAI,EAAE,gBAAK,EAAE,kBAAqB,CAAC;QAEpD,IAAM,MAAM,GAAG;YACb,MAAM,QAAA;YACN,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,KAAK,OAAA;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;QAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KAC3C;IA1EM,qBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;QACxB,UAAU,EAAEA,MAAgB;KAC7B,CAAC;IAEK,kBAAS,GAAG;QACjB,QAAQ,EAAEA,MAAgB,CAAC,UAAU;QACrC,SAAS,EAAEA,MAAgB;QAC3B,kBAAkB,EAAEA,MAAgB;QACpC,cAAc,EAAEQ,SAAmB,CAAC;YAClCC,OAAiB,CAACD,SAAmB,CAAC,CAACJ,MAAgB,EAAEJ,MAAgB,CAAC,CAAC,CAAC;YAC5EC,IAAc;SACf,CAAC;QACF,mBAAmB,EAAEI,IAAc;QACnC,MAAM,EAAEJ,IAAc;QACtB,QAAQ,EAAEA,IAAc,CAAC,UAAU;QACnC,WAAW,EAAEA,IAAc;QAC3B,OAAO,EAAEA,IAAc;QACvB,WAAW,EAAEG,MAAgB;KAC9B,CAAC;IA8KJ,eAAC;CArMD,CAAqEG,SAAe,GAqMnF;;ACxPD;IAA0DL,gCAGzD;IAkBC,sBAAY,KAA2C,EAAE,OAA4B;QAArF,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAKtB;QAsDO,gBAAU,GAAG,UAAC,KAA2C;YAC/D,IAAI,KAAI,CAAC,eAAe;gBAAE,OAAO;YACjC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC3C,KAAK,EAAE,KAAK,CAAC,YAAY;gBACzB,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,WAAW,EAAE,KAAK,CAAC,WAAW;aAC/B,CAAC,CAAC;SACJ,CAAC;QAEM,uBAAiB,GAAG;YAC1B,IAAI,KAAI,CAAC,iBAAiB;gBAAE,OAAO;YACnC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,eAAgB,CAAC,SAAS,CAAC;gBACvD,IAAI,EAAE,KAAI,CAAC,iBAAiB;gBAC5B,KAAK,EAAE,KAAI,CAAC,WAAW;gBACvB,QAAQ,EAAE,KAAI,CAAC,oBAAoB;aACpC,CAAC,CAAC;SACJ,CAAC;QAEM,qBAAe,GAAG,cAAM,QAAC;YAC/B,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,SAAS;SAChB,IAAC,CAAC;QAEK,uBAAiB,GAAG,UAAC,MAAiC;YACtD,IAAA,UAGE,EAFN,kBAAM,EACG,gDACH,CAAC;YACT,IAAI,kBAAkB;gBAAE,kBAAkB,CAAC,EAAE,MAAM,QAAA,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC,CAAC;YACjF,KAAI,CAAC,QAAQ,CAAC;gBACZ,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;SACJ,CAAC;QAEM,iBAAW,GAAG,UAAC,KAAU;YAC/B,KAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,OAAA;gBACL,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ,CAAC;QAEM,0BAAoB,GAAG;YACrB,IAAA,2DAAsB,CAAgB;YAC9C,IAAI,sBAAsB;gBAAE,sBAAsB,EAAE,CAAC;YACrD,KAAI,CAAC,eAAe,EAAE,CAAC;SACxB,CAAC;QAEM,qBAAe,GAAG;YACxB,IAAI,KAAI,CAAC,iBAAiB,EAAE;gBAC1B,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBACrC,OAAO,KAAI,CAAC,iBAAiB,CAAC;aAC/B;SACF,CAAC;QAhHA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC;;KACrC;IAED,wCAAiB,GAAjB;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,gDAAyB,GAAzB,UACE,SAA+C,EAC/C,WAAgC;QAEhC,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAErD,IACE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC;YACvD,IAAI,CAAC,MAAM,KAAK,UAAU;YAC1B,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,SAAS,CAAC,YAAY,EAClD;YACA,OAAO;SACR;QAED,IAAI,iBAAiB,GAAG,SAAS,CAAC,iBAAiB,CAAC;QACpD,IAAI,OAAO,iBAAiB,KAAK,UAAU,EAAE;YAC3C,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAChE;QACD,IAAM,oBAAoB,GAAG,iBAAiB,KAAK,KAAK,CAAC;QACzD,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;SAC1B;QAED,IAAI,CAAC,oBAAoB,EAAE;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,eAAe,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;YACtC,OAAO;SACR;QACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,2CAAoB,GAApB;QACE,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,6BAAM,GAAN;QACE,IAAM,QAAQ,GAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC;QAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAC3C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;SAChC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzB;IA3EM,yBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;KACzB,CAAC;IAEK,sBAAS,GAAG;QACjB,YAAY,EAAEA,MAAgB,CAAC,UAAU;QACzC,SAAS,EAAEA,MAAgB;QAC3B,QAAQ,EAAEC,IAAc;QACxB,kBAAkB,EAAEA,IAAc;QAClC,sBAAsB,EAAEA,IAAc;QACtC,iBAAiB,EAAEO,SAAmB,CAAC,CAACP,IAAc,EAAEI,IAAc,CAAC,CAAC;KACzE,CAAC;IA0HJ,mBAAC;CAzID,CAA0DE,SAAe,GAyIxE;;AChLM,IAAM,wBAAwB,GAAG,cAAM,QAAC,EAAE,IAAC,CAAC;AACnD,AACO,IAAM,qBAAqB,GAAG,cAAM,OAAA,KAAK,GAAA,CAAC;AAEjD,SAAgB,cAAc,CAAI,gBAAwC;IACxE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;CAC7E;AAED,SAAgB,2BAA2B,CACzC,SAA8B,EAC9B,KAAa;IAEb,IAAI,SAAS,GAAuB,EAAE,CAAC;IACvC,KAA+B,UAAmB,EAAnB,KAAA,SAAS,CAAC,SAAS,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;QAA3C,IAAA,WAAkB,EAAhB,sBAAQ,EAAE,cAAI;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YAAE,SAAS;QAErD,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;QACzC,IAAM,YAAY,GAAI,KAAa,CAAC,YAAY,CAAC,CAAC;QAElD,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;YACvC,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;YACvC,SAAS;SACV;QAGD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;YAC/B,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;SAChC;KACF;IACD,OAAO,SAAS,CAAC;CAClB;AAKD;IAAoEL,+BAGnE;IAKC,qBAAY,KAAa;QAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;QAPM,aAAO,GAAY,KAAK,CAAC;QAM9B,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;KAC9D;IAED,wCAAkB,GAAlB;QACE,iFAE2D;QAG3D,OAAO,IAAI,CAAC,eAAe,CAAC;KAC7B;IAED,wCAAkB,GAAlB,UAAmB,GAAsC;QACvD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;KAC5B;IACH,kBAAC;CAAA,CAzBmEK,SAAe,GAyBlF;;SClDe,SAAS,CAMvB,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAGjC,IAAA,6BAAkC,EAAlC,uDAAkC,EAClC,0BAA4B,EAA5B,iDAA4B,EAC5B,2BAAgB,EAAhB,qCAAgB,CACG;IAErB,IAAI,iBAAiB,GAAG,OAAoC,CAAC;IAC7D,IAAI,OAAO,iBAAiB,KAAK,UAAU,EAAE;QAC3C,iBAAiB,GAAG,cAAM,OAAA,OAAoB,GAAA,CAAC;KAChD;IAED,IAAI,cAAc,GAAG,IAA+B,CAAC;IACrD,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;QACxC,cAAc,GAAG,cAAM,OAAA,IAAW,GAAA,CAAC;KACpC;IAGD,IAAI,eAAmC,CAAC;IACxC,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBL,2BAAgC;YAAtD;;aAqDC;YAjDC,wBAAM,GAAN;gBAAA,iBAgDC;gBA/CC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAM,IAAI,gBAAQ,iBAAiB,CAAC,KAAK,CAAC,CAAE,CAAC;gBAE7C,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrD,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,QACEQ,cAAC,KAAK,eACA,IAAI,IACR,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,UAAU,EAChB,KAAK,EAAE,QAAQ,KAEd,UAAC,EAAyB;oBAAvB,IAAA,aAAS,EAAE,cAAI,EAAE,kCAAI;;oBACvB,IAAI,gBAAgB,CAAC,OAAO,EAAE;wBAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;4BAC/B,GAAG,EAAE,KAAI,CAAC,kBAAkB;yBAC7B,CAAC,CAAC;qBACJ;oBAED,IAAI,UAAU;wBAAE,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAI,CAAC;oBAIvD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAC5C,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,MAAM,CAAC;oBAC7C,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,KAAE,CAAC;oBACpC,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,WAAQ,GAAE,KAAe;+BAC1B,CAAC;wBACF,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;wBACrE,UAAU,GAAG,eAAe,CAAC;qBAC9B;oBAED,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAM,UAAU,EAAI,CAAC;iBACxD,CACK,EACR;aACH;YAnDM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YAmD7C,cAAC;SAAA,CArDqB,WAAW,GAqDhC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SC9Fe,YAAY,CAM1B,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAG3B,IAAA,6BAAkC,EAAlC,uDAAkC,EAAE,2BAAgB,EAAhB,qCAAgB,CAAsB;IAElF,IAAI,iBAAiB,GAAG,OAAuC,CAAC;IAChE,IAAI,OAAO,iBAAiB,KAAK,UAAU;QAAE,iBAAiB,GAAG,cAAM,OAAA,OAAuB,GAAA,CAAC;IAE/F,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBR,2BAAgC;YAAtD;;aAsCC;YAnCC,wBAAM,GAAN;gBACE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,IAAI,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEtC,IAAI,gBAAgB,CAAC,OAAO,EAAE;oBAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;wBAC/B,GAAG,EAAE,IAAI,CAAC,kBAAkB;qBAC7B,CAAC,CAAC;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrD,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBAED,QACEQ,cAAC,QAAQ,eAAK,IAAI,IAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,WAClD,UAAC,MAAM,EAAE,OAAO;;oBACf,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,QAAQ,CAAC;oBAC/C,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,KAAE,CAAC;oBACpC,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,WAAQ,GAAE,KAAK;+BAChB,CAAC;wBACF,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAQ,CAAC;qBACvD;oBAED,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAM,UAAU,EAAI,CAAC;iBACxD,CACQ,EACX;aACH;YApCM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YAoC7C,cAAC;SAAA,CAtCqB,WAAW,GAsChC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SChEe,gBAAgB,CAM9B,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAGjC,IAAA,6BAAkC,EAAlC,uDAAkC,EAClC,0BAA4B,EAA5B,iDAA4B,EAC5B,2BAAgB,EAAhB,qCAAgB,EAChB,sDAAiB,CACE;IAErB,IAAI,iBAAiB,GAAG,OAAoC,CAAC;IAC7D,IAAI,OAAO,iBAAiB,KAAK,UAAU;QAAE,iBAAiB,GAAG,cAAM,OAAA,OAAoB,GAAA,CAAC;IAE5F,IAAI,cAAc,GAAG,IAA+B,CAAC;IACrD,IAAI,OAAO,cAAc,KAAK,UAAU;QAAE,cAAc,GAAG,cAAM,OAAA,IAAW,GAAA,CAAC;IAG7E,IAAI,eAAmC,CAAC;IACxC,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBR,2BAA0D;YAG9E,iBAAY,KAAa;gBAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;gBADC,KAAI,CAAC,KAAK,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;;aACrC;YACD,2CAAyB,GAAzB,UAA0B,SAAiB;gBACzC,IAAI,CAAC,iBAAiB;oBAAE,OAAO;gBAC/B,IAAI,CAAC,QAAQ,CAAC;oBACZ,WAAW,EAAE,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC;iBACtD,CAAC,CAAC;aACJ;YAED,wBAAM,GAAN;gBAAA,iBA+CC;gBA9CC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAM,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEzE,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpE,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBACD,QACEQ,cAAC,YAAY,eACP,IAAI,IACR,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,UAAU,EAChB,YAAY,EAAE,QAAQ,EACtB,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,KAExC,UAAC,EAAc;oBAAZ,IAAA,cAAI,EAAE,wBAAI;;oBACZ,IAAI,gBAAgB,CAAC,OAAO,EAAE;wBAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;4BAC/B,GAAG,EAAE,KAAI,CAAC,kBAAkB;yBAC7B,CAAC,CAAC;qBACJ;oBAED,IAAI,UAAU;wBAAE,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAI,CAAC;oBAIvD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAC5C,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,MAAM,CAAC;oBAC7C,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,KAAE,CAAC;oBACpC,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,WAAQ,GAAE,KAAe;+BAC1B,CAAC;wBACF,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;wBACrE,UAAU,GAAG,eAAe,CAAC;qBAC9B;oBAED,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAM,UAAU,EAAI,CAAC;iBACxD,CACY,EACf;aACH;YA5DM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YA4D7C,cAAC;SAAA,CA9DqB,WAAW,GA8DhC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SCxGe,OAAO,CAOrB,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAErF,QAAQ,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI;QAC3B,KAAK,YAAY,CAAC,QAAQ;YACxB,OAAO,YAAY,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAClD,KAAK,YAAY,CAAC,YAAY;YAC5B,OAAO,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAGtD,KAAK,YAAY,CAAC,KAAK,CAAC;QACxB;YACE,OAAO,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;KAChD;CACF;;ACtBD,SAASC,gBAAc,CAAI,gBAAwC;IACjE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;CAC7E;AAID,SAAwB,UAAU,CAChC,gBAA+D,EAC/D,gBAAuD;IAAvD,iCAAA,EAAA,qBAAuD;IAEvD,IAAM,eAAe,GAAG,gBAAcA,gBAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;IAE1E;QAAyBT,8BAAuB;QAO9C,oBAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;YADC,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;SAC9D;QAED,uCAAkB,GAAlB;YACE;YAKA,OAAO,IAAI,CAAC,eAAe,CAAC;SAC7B;QAED,uCAAkB,GAAlB,UAAmB,GAAkD;YACnE,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;SAC5B;QAED,2BAAM,GAAN;YAAA,iBAYC;YAXC,QACEQ,cAAC,cAAc,QACZ,UAAA,MAAM;gBACL,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,KAAK,EAAE;oBAC1C,MAAM,QAAA;oBACN,GAAG,EAAE,gBAAgB,CAAC,OAAO,GAAG,KAAI,CAAC,kBAAkB,GAAG,SAAS;iBACpE,CAAC,CAAC;gBACH,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAI,CAAC;aACxC,CACc,EACjB;SACH;QApCM,sBAAW,GAAG,eAAe,CAAC;QAC9B,2BAAgB,GAAG,gBAAgB,CAAC;QAoC7C,iBAAC;KAtCD,CAAyBH,SAAe,GAsCvC;IAGD,OAAO,oBAAoB,CAAC,UAAU,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;CAC/D;;ACnDD,SAAS,oBAAoB;IAC3B,OAAO;QACL,IAAI,EAAE,KAAK;QACX,UAAU,EAAE,IAAI;KACjB,CAAC;CACH;AAED;IAAA;QAEU,kBAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QAMzD,kBAAa,GAAG,IAAI,GAAG,EAAwC,CAAC;KAqEzE;IAlEQ,8CAAqB,GAA5B,UACE,aAAuC,EACvC,UAA4C;QAE5C,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,UAAU,GAAG,UAAU,CAAC;KAC7D;IAGM,yCAAgB,GAAvB,UAA2C,aAAuC;QAChF,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC;KACvD;IAEM,wCAAe,GAAtB,UACE,aAAuC,EACvC,MAA6B;QAE7B,IAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,aAAa,EACb,IAAI,OAAO,CAAC,UAAA,OAAO;gBACjB,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;aACpC,CAAC,CACH,CAAC;YAGF,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,EAAE,CAAC;KACjB;IAEM,oCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,CAAC;KACpC;IAEM,gDAAuB,GAA9B;QAAA,iBAiBC;QAhBC,IAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,aAAa;YAUhD,KAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC9B;IAEO,wCAAe,GAAvB,UACE,aAAuC;QAE/B,IAAA,kCAAa,CAAU;QACzB,IAAA,wBAA0C,EAAxC,gBAAK,EAAE,wBAAiC,CAAC;QACjD,IAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,EAAqB,CAAC;QACxE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC;YAAE,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChE,IAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAClD,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,oBAAoB,EAAE,CAAC;QACnE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC;YAAE,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC;KACb;IACH,qBAAC;CAAA,IAAA;SAEuB,eAAe,CACrC,IAAqB,EACrB,OAAoC;IAApC,wBAAA,EAAA,YAAoC;IAEpC,OAAO,iBAAiB,CAAC;QACvB,IAAI,MAAA;QACJ,OAAO,SAAA;QAGP,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,oBAAoB;KACjE,CAAC,CAAC;CACJ;AAQD,SAAgB,iBAAiB,CAAC,EAOP;QANzB,cAAI,EACJ,eAAY,EAAZ,iCAAY,EAIZ,sBAAiE,EAAjE,sFAAiE;IAEjE,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAE5C;QAAqCL,0CAAe;QAApD;;SAiBC;QAZC,gDAAe,GAAf;YACE,oBAAY,OAAO,IAAE,cAAc,gBAAA,IAAG;SACvC;QAED,uCAAM,GAAN;YAME,OAAO,IAAI,CAAC;SACb;QAfM,wCAAiB,GAA2B;YACjD,cAAc,EAAEF,MAAgB;SACjC,CAAC;QAcJ,6BAAC;KAjBD,CAAqCO,SAAe,GAiBnD;IAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;QAC9B,sBAAsB,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAGK,GAAa,CAAC;KAC/D,CAAC,CAAC;IAEH,SAAS,OAAO;QACd,IAAM,IAAI,GAAG,cAAc,CAACF,aAAmB,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACzE,OAAO,cAAc,CAAC,WAAW,EAAE;cAC/B,cAAc,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC;cACtD,IAAI,CAAC;KACV;IAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CACxC;;SC1Je,sBAAsB,CAAC,SAA4B;IACjE,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,SAAS;QACf,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc;KAC3D,CAAC,CAAC;CACJ;;SCRe,OAAO;IAAC,eAAoB;SAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;QAApB,0BAAoB;;IAC1C,IAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;IAClC,OAAO;QAAU,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACtB,IAAA,4BAAa,EAAE,kCAAgB,CAAa;QACnD,IAAI,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,aAAa,CAAC,OAAO,CAAC,UAAC,GAAG;YACxB,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;SAChC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACf,CAAA;CACF;;;;"}